services:
  frontend:
    image: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - ${HTTP_PORT}:80
      - ${HTTPS_PORT}:443
    environment:
      - API_PORT=${API_PORT}
    develop:
      watch:
        - action: sync
          path: ./frontend/app
          target: /usr/share/nginx/html
        - action: sync+restart
          path: ./frontend/nginx.conf
          target: /etc/nginx/nginx.conf.template
    volumes:
      - avatars:/var/www/avatars
    restart: on-failure
    depends_on:
        backend:
            condition: service_healthy

  backend:
    image: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    develop:
      watch:
        - action: sync
          path: ./backend/app
          target: /app
          ignore:
            - .venv/
            - .idea/
        - action: rebuild
          path: /backend/app/requirements.txt
    ports:
      - ${API_PORT}:${API_PORT}
    environment:
      - PORT=${API_PORT}
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - REDIS_PORT=${REDIS_PORT}
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_SECRET=${CLIENT_SECRET}
      - REDIRECT_URI=${REDIRECT_URI}
    env_file:
      - .env
    healthcheck:
        test: curl --fail http://localhost:${API_PORT}/health/ || exit 1
        interval: 15s
        timeout: 10s
        retries: 3
        start_period: 10s
    volumes:
      - avatars:/app/media/avatars
    restart: on-failure
    depends_on:
      - postgres
      - redis

  postgres:
    image: postgres:16.3-alpine3.19
    ports:
      - ${DB_PORT}:${DB_PORT}
    expose:
      - ${DB_PORT}
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}

  redis:
    image: redis:6.2.6-alpine
    expose:
      - ${REDIS_PORT}
    volumes:
      - ./backend/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

volumes:
  postgres:
    driver: local
  frontend:
    driver: local
  avatars:
    driver: local