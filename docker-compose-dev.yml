services:
  frontend:
    image: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - ${HTTP_PORT}:80
      - ${HTTPS_PORT}:443
    environment:
      - API_PORT=${API_PORT}
    develop:
      watch:
        - action: sync
          path: ./frontend/app
          target: /usr/share/nginx/html
        - action: sync+restart
          path: ./frontend/nginx.conf
          target: /etc/nginx/nginx.conf.template
    volumes:
      - avatars:/var/www/avatars
      - ./frontend/certs:/etc/nginx/ssl:ro
    restart: on-failure
    depends_on:
        backend:
            condition: service_healthy

  backend:
    image: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    develop:
      watch:
        - action: sync
          path: ./backend/app
          target: /app
          ignore:
            - .venv/
            - .idea/
        - action: rebuild
          path: /backend/app/requirements.txt
    ports:
      - ${API_PORT}:${API_PORT}
    environment:
      - PORT=${API_PORT}
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - REDIS_PORT=${REDIS_PORT}
      - CLIENT_ID=${CLIENT_ID}
      - CLIENT_SECRET=${CLIENT_SECRET}
      - REDIRECT_URI=${REDIRECT_URI}
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=${LOGSTASH_PORT}
    env_file:
      - .env
    healthcheck:
        test: curl --fail http://localhost:${API_PORT}/health/ || exit 1
        interval: 15s
        timeout: 10s
        retries: 3
        start_period: 10s
    volumes:
      - avatars:/app/media/avatars
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      logstash:
        condition: service_healthy

  postgres:
    image: postgres:16.3-alpine3.19
    ports:
      - ${DB_PORT}:${DB_PORT}
    expose:
      - ${DB_PORT}
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.2.6-alpine
    expose:
      - ${REDIS_PORT}
    volumes:
      - ./backend/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    environment:
      - discovery.type=single-node
    ports:
      - "${ELASTICSEARCH_PORT}:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./elasticsearch/init-ilm-policy.sh:/usr/share/elasticsearch/init-ilm-policy.sh
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200 >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["/bin/bash", "-c", "chmod +x /usr/share/elasticsearch/init-ilm-policy.sh && /usr/share/elasticsearch/init-ilm-policy.sh & /usr/local/bin/docker-entrypoint.sh"]

  logstash:
    image: docker.elastic.co/logstash/logstash:7.14.0
    ports:
      - "${LOGSTASH_PORT}:5002"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600"]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601"]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana-nginx:
    image: nginx:alpine
    ports:
      - "${KIBANA_PORT}:443"
    volumes:
      - ./nginx/kibana.conf:/etc/nginx/conf.d/default.conf.template
      - ./frontend/certs:/etc/nginx/ssl:ro
    environment:
      - KIBANA_PORT=${KIBANA_PORT}
    command: /bin/sh -c "envsubst '$$KIBANA_PORT' < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    depends_on:
      kibana:
        condition: service_healthy

volumes:
  postgres:
    driver: local
  frontend:
    driver: local
  avatars:
    driver: local
  elasticsearch_data:
    driver: local
